/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vedang's Notes (vedang.narain@msdtc.ox.ac.uk)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*

This script contains two tests. The first simulates a simple bifurcating network. The second test uses the same architecture but removes the lower vessel at the bifurcation. In the first simulation, we use Pries's haematocrit splitting rule. In the second simulation, we assign the same haematocrit values to the remaining vessels as those generated by Pries's rule in the previous simulation.

H = Haematocrit
BC = boundary condition
RT = Radiotherapy
PQ = Perfusion Quotient
Fig. = Figure
# = number

14/6/21

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialisation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef TESTVESSELEBUG_HPP_
#define TESTVESSELEBUG_HPP_
#define _BACKWARD_BACKWARD_WARNING_H 1  // Cut out the VTK deprecated warning

// General functionality
#include <boost/lexical_cast.hpp>
#include <cxxtest/TestSuite.h>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <time.h>
#include <vector>
#include <vtkPoints.h>
#include <vtkSmartPointer.h>
#include "AbstractCellBasedWithTimingsTestSuite.hpp"
#include "CheckpointArchiveTypes.hpp"
#include "FileFinder.hpp"
#include "OutputFileHandler.hpp"
#include "RandomNumberGenerator.hpp"
#include "SimulationTime.hpp"
#include "SmartPointers.hpp"

// Geometry tools
#include "Part.hpp"

// Dimensional analysis
#include "BaseUnits.hpp"
#include "UnitCollection.hpp"
#include "GenericParameters.hpp"
#include "ParameterCollection.hpp"
#include "Owen11Parameters.hpp"
#include "Secomb04Parameters.hpp"
#include "Vertex.hpp"

// Grids and PDEs
#include "CellBasedDiscreteSource.hpp"
#include "CellStateDependentDiscreteSource.hpp"
#include "SimpleLinearEllipticFiniteDifferenceSolver.hpp"
#include "SimpleLinearEllipticFiniteElementSolver.hpp"
#include "DiscreteContinuumBoundaryCondition.hpp"
#include "DiscreteContinuumLinearEllipticPde.hpp"
#include "RegularGrid.hpp"
#include "GridCalculator.hpp"
#include "CellwiseSourceEllipticPde.hpp"
#include "ConstBoundaryCondition.hpp"
#include "EllipticGrowingDomainPdeModifier.hpp"
#include "VesselBasedDiscreteSource.hpp"

// Vessel networks
#include "Vessel.hpp"
#include "VesselNetwork.hpp"
#include "VesselNetworkGenerator.hpp"
#include "VesselNetworkGeometryCalculator.hpp"
#include "VesselNetworkPropertyManager.hpp"
#include "VesselNode.hpp"
#include "VesselSegment.hpp"

// Flow
#include "NodeFlowProperties.hpp"
#include "VesselImpedanceCalculator.hpp"
#include "FlowSolver.hpp"
#include "WallShearStressCalculator.hpp"
#include "MechanicalStimulusCalculator.hpp"
#include "MetabolicStimulusCalculator.hpp"
#include "ShrinkingStimulusCalculator.hpp"
#include "StructuralAdaptationSolver.hpp"
#include "ViscosityCalculator.hpp"

// Haematocrit
#include "BetteridgeHaematocritSolver.hpp"
#include "ConstantHaematocritSolver.hpp"
#include "YangHaematocritSolver.hpp"
#include "PriesHaematocritSolver.hpp"
#include "PriesWithMemoryHaematocritSolver.hpp"

// Forces
#include "GeneralisedLinearSpringForce.hpp"

// Vessel regression solver
#include "WallShearStressBasedRegressionSolver.hpp"

// General solver to collect all the flows
#include "MicrovesselSolver.hpp"
#include "MicrovesselSimulationModifier.hpp"
#include "OnLatticeSimulation.hpp"
#include "OffLatticeSimulation.hpp"

// Visualisation
#include "MicrovesselVtkScene.hpp"
#include "VtkSceneMicrovesselModifier.hpp"

// Keep this last
#include "PetscAndVtkSetupAndFinalize.hpp"
using namespace std;

// Make a test class
class TestVesselBug : public CxxTest::TestSuite
{

public:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Tests
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Simulate a network with a bifurcation using Pries's haematocrit splitting rule
    void TestBifurcatingNetwork2D()
    {
        // Set the network heterogeneity
        unsigned n_alpha = 5;
        double alpha = 1.0+(double)n_alpha*0.1;  // alpha determines the relative radius of the left vessel 
    
        // Set file name based on alpha and solver
        std::ostringstream strs;
        strs << std::fixed << std::setprecision( 1 );
        strs << "TestBifurcatingNetwork2D/PriesHaematocrit/Alpha" << alpha << "/";
        std::string str_directory_name = strs.str();
        auto p_output_file_handler = std::make_shared<OutputFileHandler>(str_directory_name, true);

        // Set up the reference length for the simulation
        QLength reference_length(1.0_um);
        BaseUnits::Instance()->SetReferenceLengthScale(reference_length);

        // Set key vessel parameters
        QLength vessel_length(100.0_um);
        QLength vessel_height = (pow(2,0.5)*vessel_length)*0.5;

        // Set up the domain parameters
        QLength domain_x = vessel_height+vessel_height+vessel_length+vessel_length+0.0001_um;  // this should be the x-position of outlet node 
        QLength domain_y = domain_x;  // should be the same as domain_x to make square domain
        QLength mid_domain_y = domain_y*0.5;
        QLength equilateral_grid_spacing = 1.0_um;

        // Set node positions
        std::shared_ptr<VesselNode<2> > p_node_1 = VesselNode<2>::Create(0.0_um, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_2 = VesselNode<2>::Create(vessel_length, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_3 = VesselNode<2>::Create(vessel_height+vessel_length, vessel_height+mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_4 = VesselNode<2>::Create(vessel_height+vessel_length, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_5 = VesselNode<2>::Create(vessel_height+vessel_height+vessel_length, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_6 = VesselNode<2>::Create(vessel_height+vessel_height+vessel_length+vessel_length, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_7 = VesselNode<2>::Create(domain_x, mid_domain_y);  // add a node at a distance of 100 picometres from the last node to work around glitch of disconnected flow when setting p_node_6 as the output node

        // Make segments 
        std::shared_ptr<VesselSegment<2> > p_segment_1 = VesselSegment<2>::Create(p_node_1, p_node_2);
        std::shared_ptr<VesselSegment<2> > p_segment_2 = VesselSegment<2>::Create(p_node_2, p_node_3);
        std::shared_ptr<VesselSegment<2> > p_segment_3 = VesselSegment<2>::Create(p_node_2, p_node_4);
        std::shared_ptr<VesselSegment<2> > p_segment_4 = VesselSegment<2>::Create(p_node_3, p_node_5);
        std::shared_ptr<VesselSegment<2> > p_segment_5 = VesselSegment<2>::Create(p_node_4, p_node_5);
        std::shared_ptr<VesselSegment<2> > p_segment_6 = VesselSegment<2>::Create(p_node_5, p_node_6);
        std::shared_ptr<VesselSegment<2> > p_segment_7 = VesselSegment<2>::Create(p_node_6, p_node_7);

        // Make vessels
        std::shared_ptr<Vessel<2> > p_vessel_1 = Vessel<2>::Create(p_segment_1);
        std::shared_ptr<Vessel<2> > p_vessel_2 = Vessel<2>::Create(p_segment_2);
        std::shared_ptr<Vessel<2> > p_vessel_3 = Vessel<2>::Create(p_segment_3);
        std::shared_ptr<Vessel<2> > p_vessel_4 = Vessel<2>::Create(p_segment_4);
        std::shared_ptr<Vessel<2> > p_vessel_5 = Vessel<2>::Create(p_segment_5);
        std::shared_ptr<Vessel<2> > p_vessel_6 = Vessel<2>::Create(p_segment_6);
        std::shared_ptr<Vessel<2> > p_vessel_7 = Vessel<2>::Create(p_segment_7);

        // Add the vessels to a vessel network
        std::shared_ptr<VesselNetwork<2> > p_network = VesselNetwork<2>::Create();
        p_network->AddVessel(p_vessel_1);
        p_network->AddVessel(p_vessel_2);
        p_network->AddVessel(p_vessel_3);
        p_network->AddVessel(p_vessel_4);
        p_network->AddVessel(p_vessel_5);
        p_network->AddVessel(p_vessel_6);
        p_network->AddVessel(p_vessel_7);
        
        // Specify which nodes are the inlets and outlets
        p_network->GetNode(0)->GetFlowProperties()->SetIsInputNode(true);
        p_network->GetNode(0)->GetFlowProperties()->SetPressure(Owen11Parameters::mpInletPressure->GetValue("User"));
        p_network->GetNode(p_network->GetNumberOfNodes()-1)->GetFlowProperties()->SetIsOutputNode(true);
        p_network->GetNode(p_network->GetNumberOfNodes()-1)->GetFlowProperties()->SetPressure(Owen11Parameters::mpOutletPressure->GetValue("User"));

        // Set segment radii values
        QLength vessel_radius(1.0 *GenericParameters::mpCapillaryRadius->GetValue());
        VesselNetworkPropertyManager<2>::SetSegmentRadii(p_network, vessel_radius);

        // Set heterogeneous radii for upper path
        QLength alpha_radius(alpha*vessel_radius);
        p_vessel_2->SetRadius(alpha_radius);
        p_vessel_4->SetRadius(alpha_radius);

        // Set segment viscosity values
        QDynamicViscosity viscosity = Owen11Parameters::mpPlasmaViscosity->GetValue();
        auto p_viscosity_calculator = ViscosityCalculator<2>::Create();
        p_viscosity_calculator->SetPlasmaViscosity(viscosity);
        p_viscosity_calculator->SetVesselNetwork(p_network);
        p_viscosity_calculator->Calculate();

        // Set up the impedance calculator
        VesselImpedanceCalculator<2> impedance_calculator = VesselImpedanceCalculator<2>();
        impedance_calculator.SetVesselNetwork(p_network);
        impedance_calculator.Calculate();

        // Set up the flow solver
        FlowSolver<2> flow_solver = FlowSolver<2>();
        flow_solver.SetVesselNetwork(p_network);
        flow_solver.SetUp();
        flow_solver.Solve();

        // Set the haematocrit solver
        std::shared_ptr<AbstractHaematocritSolver<2>> p_abstract_haematocrit_solver;
        std::cout << "Now using PriesHaematocritSolver..." << std::endl;
        auto p_haematocrit_solver = PriesHaematocritSolver<2>::Create();
        p_haematocrit_solver->SetVesselNetwork(p_network);
        p_haematocrit_solver->SetHaematocrit(Owen11Parameters::mpInflowHaematocrit->GetValue("User"));
        p_abstract_haematocrit_solver = p_haematocrit_solver;                    

        // Set up the grid for the finite difference solver
        auto p_grid = RegularGrid<2>::Create();
        p_grid->SetSpacing(equilateral_grid_spacing);
        c_vector<unsigned, 3> dimensions;
        dimensions[0] = unsigned((domain_x)/(equilateral_grid_spacing))+1; // num x
        dimensions[1] = unsigned((domain_y)/(equilateral_grid_spacing))+1; // num_y
        dimensions[2] = 1;
        p_grid->SetDimensions(dimensions);
        
        // Choose the PDE
        std::shared_ptr<DiscreteContinuumLinearEllipticPde<2> > p_oxygen_pde = DiscreteContinuumLinearEllipticPde<2>::Create();
        
        // Set the diffusivity and decay terms
        p_oxygen_pde->SetIsotropicDiffusionConstant(Owen11Parameters::mpOxygenDiffusivity->GetValue("User"));
        p_oxygen_pde->SetContinuumLinearInUTerm(-1.0*Owen11Parameters::mpCellOxygenConsumptionRate->GetValue("User"));

        // Set up the discrete source
        std::shared_ptr<VesselBasedDiscreteSource<2> > p_vessel_source = VesselBasedDiscreteSource<2>::Create();
        QSolubility oxygen_solubility_at_stp = Secomb04Parameters::mpOxygenVolumetricSolubility->GetValue("User") *
            GenericParameters::mpGasConcentrationAtStp->GetValue("User");
        QConcentration vessel_oxygen_concentration = oxygen_solubility_at_stp *
            Owen11Parameters::mpReferencePartialPressure->GetValue("User");
        p_vessel_source->SetReferenceConcentration(vessel_oxygen_concentration);
        p_vessel_source->SetReferenceHaematocrit(Owen11Parameters::mpInflowHaematocrit->GetValue("User"));
        p_vessel_source->SetVesselPermeability(1.0*Owen11Parameters::mpVesselOxygenPermeability->GetValue("User"));
        p_oxygen_pde->AddDiscreteSource(p_vessel_source);

        // Set up the finite difference solver for oxygen (which handles everything)
        auto p_oxygen_solver = SimpleLinearEllipticFiniteDifferenceSolver<2>::Create();
        p_oxygen_solver->SetPde(p_oxygen_pde);
        p_oxygen_solver->SetLabel("oxygen");
        p_oxygen_solver->SetGrid(p_grid);

        // Set up an iteration to solve the non-linear problem (haematocrit problem is coupled to flow problem via viscosity/impedance)
        double initial_haematocrit = 0.45;
        unsigned max_iter = 1000; 
        double tolerance2 = 1.e-10;
        std::vector<VesselSegmentPtr<2> > segments = p_network->GetVesselSegments();
        std::vector<double> previous_haematocrit(segments.size(), double(initial_haematocrit));
        for(unsigned idx=0;idx<max_iter;idx++)
        {
            // Run the solvers
            impedance_calculator.Calculate();
            flow_solver.SetUp();
            flow_solver.Solve();
            p_abstract_haematocrit_solver->Calculate();
            p_viscosity_calculator->Calculate();

            // Get the residual
            double max_difference = 0.0;
            double h_for_max = 0.0;
            double prev_for_max = 0.0;
            for(unsigned jdx=0;jdx<segments.size();jdx++)  // for all the segments in the network
            {
                double current_haematocrit = segments[jdx]->GetFlowProperties()->GetHaematocrit();  // get haematocrit
                double difference = std::abs(current_haematocrit - previous_haematocrit[jdx]);  // difference in haematocrit
                if(difference>max_difference)  // get the max. diff b/w prev. and current H, the value of H, and the prev. H
                {
                    max_difference = difference;
                    h_for_max = current_haematocrit;
                    prev_for_max = previous_haematocrit[jdx];
                }
                previous_haematocrit[jdx] = current_haematocrit;
            }
            std::cout << "H at max difference: " << h_for_max << ", Prev H at max difference:" << prev_for_max << std::endl;

            // Print the final or intermediary convergence results
            if(max_difference<=tolerance2)  
            {
                std::cout << "Converged after: " << idx << " iterations. " <<  std::endl;
                break;
            }
            else
            {
                if(idx%1==0)
                {
                    std::cout << "Max Difference at iter: " << idx << " is " << max_difference << std::endl;
                }
            }

            // If there is no convergence after all the iterations, print the error message
            if(idx==max_iter-1)
            {
                std::cout << "Problem encountered using alpha = " << n_alpha << std::endl;
                EXCEPTION("Did not converge after " + std::to_string(idx) + " iterations.");
            }
        }
        
        // Run the simulation 
        SimulationTime::Instance()->SetStartTime(0.0);
        SimulationTime::Instance()->SetEndTimeAndNumberOfTimeSteps(1.0, 1);  // Let's just do 1 time step; will be steady state anyway
        auto p_microvessel_solver = MicrovesselSolver<2>::Create();
        p_microvessel_solver->SetVesselNetwork(p_network);
        p_microvessel_solver->SetOutputFileHandler(p_output_file_handler);
        p_microvessel_solver->AddDiscreteContinuumSolver(p_oxygen_solver);
        p_microvessel_solver->Run();

        // Print the average oxygenation
        std::vector<double> solution = p_oxygen_solver->GetSolution();
        double average_oxygen = 0.0;
        for(unsigned jdx=0;jdx<solution.size();jdx++)
        {
            average_oxygen += solution[jdx];
        }
        average_oxygen /= double(solution.size());
        std::cout << "Average oxygen: " << average_oxygen << std::endl;
        
        // Write the output file (visualise with Paraview: set Filters->Alphabetical->Tube)
        std::string output_file = p_output_file_handler->GetOutputDirectoryFullPath().append("FinalHaematocrit.vtp");
        p_network->Write(output_file);

        // Dump our parameter collection to an xml file and, importantly, clear it for the next test
        ParameterCollection::Instance()->DumpToFile(p_output_file_handler->GetOutputDirectoryFullPath() + "parameter_collection.xml");
        ParameterCollection::Instance()->Destroy();
        BaseUnits::Instance()->Destroy();
        SimulationTime::Instance()->Destroy();
    }    

    // Simulate the same network but without the thinner vessel at the bifurcation, and assign the same haematocrit to the remaining vessels 
    void TestSinglePathNetwork2D()
    {
        // Set the network heterogeneity
        unsigned n_alpha = 5;
        double alpha = 1.0+(double)n_alpha*0.1;  // alpha determines the relative radius of the left vessel 
        
        // Set file name based on alpha and solver
        std::ostringstream strs;
        strs << std::fixed << std::setprecision( 1 );
        strs << "TestSinglePathNetwork2D/ConstantHaematocrit/Alpha" << alpha << "/";
        std::string str_directory_name = strs.str();
        auto p_output_file_handler = std::make_shared<OutputFileHandler>(str_directory_name, true);

        // Set up the reference length for the simulation
        QLength reference_length(1.0_um);
        BaseUnits::Instance()->SetReferenceLengthScale(reference_length);

        // Set key vessel parameters
        QLength vessel_length(100.0_um);
        QLength vessel_height = (pow(2,0.5)*vessel_length)*0.5;

        // Set up the domain parameters
        QLength domain_x = vessel_height+vessel_height+vessel_length+vessel_length+0.0001_um;  // this should be the x-position of outlet node 
        QLength domain_y = domain_x;  // should be the same as domain_x to make square domain
        QLength mid_domain_y = domain_y*0.5;
        QLength equilateral_grid_spacing = 1.0_um;

        // Set node positions
        std::shared_ptr<VesselNode<2> > p_node_1 = VesselNode<2>::Create(0.0_um, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_2 = VesselNode<2>::Create(vessel_length, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_3 = VesselNode<2>::Create(vessel_height+vessel_length, vessel_height+mid_domain_y);
        // std::shared_ptr<VesselNode<2> > p_node_4 = VesselNode<2>::Create(vessel_height+vessel_length, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_5 = VesselNode<2>::Create(vessel_height+vessel_height+vessel_length, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_6 = VesselNode<2>::Create(vessel_height+vessel_height+vessel_length+vessel_length, mid_domain_y);
        std::shared_ptr<VesselNode<2> > p_node_7 = VesselNode<2>::Create(domain_x, mid_domain_y);  // add a node at a distance of 100 picometres from the last node to work around glitch of disconnected flow when setting p_node_6 as the output node

        // Make segments 
        std::shared_ptr<VesselSegment<2> > p_segment_1 = VesselSegment<2>::Create(p_node_1, p_node_2);
        std::shared_ptr<VesselSegment<2> > p_segment_2 = VesselSegment<2>::Create(p_node_2, p_node_3);
        // std::shared_ptr<VesselSegment<2> > p_segment_3 = VesselSegment<2>::Create(p_node_2, p_node_4);
        std::shared_ptr<VesselSegment<2> > p_segment_4 = VesselSegment<2>::Create(p_node_3, p_node_5);
        // std::shared_ptr<VesselSegment<2> > p_segment_5 = VesselSegment<2>::Create(p_node_4, p_node_5);
        std::shared_ptr<VesselSegment<2> > p_segment_6 = VesselSegment<2>::Create(p_node_5, p_node_6);
        std::shared_ptr<VesselSegment<2> > p_segment_7 = VesselSegment<2>::Create(p_node_6, p_node_7);

        // Make vessels
        std::shared_ptr<Vessel<2> > p_vessel_1 = Vessel<2>::Create(p_segment_1);
        std::shared_ptr<Vessel<2> > p_vessel_2 = Vessel<2>::Create(p_segment_2);
        // std::shared_ptr<Vessel<2> > p_vessel_3 = Vessel<2>::Create(p_segment_3);
        std::shared_ptr<Vessel<2> > p_vessel_4 = Vessel<2>::Create(p_segment_4);
        // std::shared_ptr<Vessel<2> > p_vessel_5 = Vessel<2>::Create(p_segment_5);
        std::shared_ptr<Vessel<2> > p_vessel_6 = Vessel<2>::Create(p_segment_6);
        std::shared_ptr<Vessel<2> > p_vessel_7 = Vessel<2>::Create(p_segment_7);

        // Add the vessels to a vessel network
        std::shared_ptr<VesselNetwork<2> > p_network = VesselNetwork<2>::Create();
        p_network->AddVessel(p_vessel_1);
        p_network->AddVessel(p_vessel_2);
        // p_network->AddVessel(p_vessel_3);
        p_network->AddVessel(p_vessel_4);
        // p_network->AddVessel(p_vessel_5);
        p_network->AddVessel(p_vessel_6);
        p_network->AddVessel(p_vessel_7);
        
        // Specify which nodes are the inlets and outlets
        p_network->GetNode(0)->GetFlowProperties()->SetIsInputNode(true);
        p_network->GetNode(0)->GetFlowProperties()->SetPressure(Owen11Parameters::mpInletPressure->GetValue("User"));
        p_network->GetNode(p_network->GetNumberOfNodes()-1)->GetFlowProperties()->SetIsOutputNode(true);
        p_network->GetNode(p_network->GetNumberOfNodes()-1)->GetFlowProperties()->SetPressure(Owen11Parameters::mpOutletPressure->GetValue("User"));

        // Set segment radii values
        QLength vessel_radius(1.0 *GenericParameters::mpCapillaryRadius->GetValue());
        VesselNetworkPropertyManager<2>::SetSegmentRadii(p_network, vessel_radius);

        // Set heterogeneous radii for upper path
        QLength alpha_radius(alpha*vessel_radius);
        p_vessel_2->SetRadius(alpha_radius);
        p_vessel_4->SetRadius(alpha_radius);

        // Set segment viscosity values
        QDynamicViscosity viscosity = Owen11Parameters::mpPlasmaViscosity->GetValue();
        auto p_viscosity_calculator = ViscosityCalculator<2>::Create();
        p_viscosity_calculator->SetPlasmaViscosity(viscosity);
        p_viscosity_calculator->SetVesselNetwork(p_network);
        p_viscosity_calculator->Calculate();

        // Set up the impedance calculator
        VesselImpedanceCalculator<2> impedance_calculator = VesselImpedanceCalculator<2>();
        impedance_calculator.SetVesselNetwork(p_network);
        impedance_calculator.Calculate();
            
        // Set up the flow solver
        FlowSolver<2> flow_solver = FlowSolver<2>();
        flow_solver.SetVesselNetwork(p_network);
        flow_solver.SetUp();
        flow_solver.Solve();

        // Set the haematocrit solver
        std::shared_ptr<AbstractHaematocritSolver<2>> p_abstract_haematocrit_solver;
        std::cout << "Now using ConstantHaematocritSolver..." << std::endl;
        auto p_haematocrit_solver = ConstantHaematocritSolver<2>::Create();
        p_haematocrit_solver->SetVesselNetwork(p_network);
        p_abstract_haematocrit_solver = p_haematocrit_solver;                    

        // Set up the grid for the finite difference solver
        auto p_grid = RegularGrid<2>::Create();
        p_grid->SetSpacing(equilateral_grid_spacing);
        c_vector<unsigned, 3> dimensions;
        dimensions[0] = unsigned((domain_x)/(equilateral_grid_spacing))+1; // num x
        dimensions[1] = unsigned((domain_y)/(equilateral_grid_spacing))+1; // num_y
        dimensions[2] = 1;
        p_grid->SetDimensions(dimensions);
        
        // Choose the PDE
        std::shared_ptr<DiscreteContinuumLinearEllipticPde<2> > p_oxygen_pde = DiscreteContinuumLinearEllipticPde<2>::Create();
        
        // Set the diffusivity and decay terms
        p_oxygen_pde->SetIsotropicDiffusionConstant(Owen11Parameters::mpOxygenDiffusivity->GetValue("User"));
        p_oxygen_pde->SetContinuumLinearInUTerm(-1.0*Owen11Parameters::mpCellOxygenConsumptionRate->GetValue("User"));
        
        // Set up the discrete source
        std::shared_ptr<VesselBasedDiscreteSource<2> > p_vessel_source = VesselBasedDiscreteSource<2>::Create();
        QSolubility oxygen_solubility_at_stp = Secomb04Parameters::mpOxygenVolumetricSolubility->GetValue("User") *
            GenericParameters::mpGasConcentrationAtStp->GetValue("User");
        QConcentration vessel_oxygen_concentration = oxygen_solubility_at_stp *
            Owen11Parameters::mpReferencePartialPressure->GetValue("User");
        p_vessel_source->SetReferenceConcentration(vessel_oxygen_concentration);
        p_vessel_source->SetReferenceHaematocrit(Owen11Parameters::mpInflowHaematocrit->GetValue("User"));
        p_vessel_source->SetVesselPermeability(1.0*Owen11Parameters::mpVesselOxygenPermeability->GetValue("User"));
        p_oxygen_pde->AddDiscreteSource(p_vessel_source);

        // Set the vessel haematocrit to be the same as the values found in the bifurcating network
        p_segment_1->GetFlowProperties()->SetHaematocrit(0.45);
        p_segment_2->GetFlowProperties()->SetHaematocrit(0.488843);
        p_segment_4->GetFlowProperties()->SetHaematocrit(0.488843);
        p_segment_6->GetFlowProperties()->SetHaematocrit(0.45);
        p_segment_7->GetFlowProperties()->SetHaematocrit(0.45);

        // Set up the finite difference solver for oxygen (which handles everything)
        auto p_oxygen_solver = SimpleLinearEllipticFiniteDifferenceSolver<2>::Create();
        p_oxygen_solver->SetPde(p_oxygen_pde);
        p_oxygen_solver->SetLabel("oxygen");
        p_oxygen_solver->SetGrid(p_grid);

        // Run the simulation 
        SimulationTime::Instance()->SetStartTime(0.0);
        SimulationTime::Instance()->SetEndTimeAndNumberOfTimeSteps(1.0, 1);  // Let's just do 1 time step; will be steady state anyway
        auto p_microvessel_solver = MicrovesselSolver<2>::Create();
        p_microvessel_solver->SetVesselNetwork(p_network);
        p_microvessel_solver->SetOutputFileHandler(p_output_file_handler);
        p_microvessel_solver->AddDiscreteContinuumSolver(p_oxygen_solver);
        p_microvessel_solver->Run();

        // Print the average oxygenation
        std::vector<double> solution = p_oxygen_solver->GetSolution();
        double average_oxygen = 0.0;
        for(unsigned jdx=0;jdx<solution.size();jdx++)
        {
            average_oxygen += solution[jdx];
        }
        average_oxygen /= double(solution.size());
        std::cout << "Average oxygen: " << average_oxygen << std::endl;
        
        // Write the output file (visualise with Paraview: set Filters->Alphabetical->Tube)
        std::string output_file = p_output_file_handler->GetOutputDirectoryFullPath().append("FinalHaematocrit.vtp");
        p_network->Write(output_file);

        // Dump our parameter collection to an xml file and, importantly, clear it for the next test
        ParameterCollection::Instance()->DumpToFile(p_output_file_handler->GetOutputDirectoryFullPath() + "parameter_collection.xml");
        ParameterCollection::Instance()->Destroy();
        BaseUnits::Instance()->Destroy();
        SimulationTime::Instance()->Destroy();
    }    

};

#endif /*TESTVESSELBUG_HPP_*/
